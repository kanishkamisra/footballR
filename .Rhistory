beta1 = beta0 + AB - Hits,
new = alpha1 / (alpha1 + beta1))
ggplot(estimates_wAB, aes(original, new, color = AB)) +
geom_point() +
geom_abline(color = red, size = 1) +
xlab("Original EB Estimate") +
ylab("EB Estimate w/ AB term") +
scale_color_continuous(trans = "log", breaks = 10 ^ (0:4)) +
# theme_minimal()+
theme_fivethirtyeight(base_family = "Roboto Condensed") +
theme(plot.title=element_text(family="Roboto Condensed", face = "bold")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
# geom_hline(yintercept=0,size=1.2,colour="#535353") +
ggtitle("Shrinkage of Estimates with AB") +
labs(subtitle = "Kanishka Misra", caption = "A Plot by Kanishka Misra")
batters_estimates %>%
filter(AB >= 20) %>%
gather(type, value, avg, estimate) %>%
mutate(type = plyr::revalue(type, c(avg = "Raw",
estimate = "With EB Shrinkage"))) %>%
ggplot(aes(AB, value)) +
geom_point(color = yellow) +
geom_hline(color = red, size = 1.5, yintercept = prior_mu) +
facet_wrap(~type) +
ylab("average") +
geom_smooth(method = "lm", color = blue, size = 1.5) +
scale_x_log10() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
ggtitle("At-bats vs log averages and estimates") +
# geom_hline(yintercept=0,size=1.2,colour="#535353") +
labs(subtitle = "Kanishka Misra")
batters %>%
filter(AB >= 20) %>%
ggplot(aes(AB, avg)) +
geom_point(color = yellow) +
geom_smooth(method = "lm", se = FALSE, color = blue, size = 1.5) +
scale_x_log10() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
ggtitle("At-bats vs logarithmic batting average")
batters_estimates %>%
filter(AB >= 20) %>%
gather(type, value, avg, estimate) %>%
mutate(type = plyr::revalue(type, c(avg = "Raw",
estimate = "With EB Shrinkage"))) %>%
ggplot(aes(AB, value)) +
geom_point(color = yellow) +
geom_hline(color = red, size = 1.5, yintercept = prior_mu) +
facet_wrap(~type) +
ylab("average") +
geom_smooth(method = "lm", color = blue, size = 1.5) +
scale_x_log10() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
ggtitle("At-bats vs log averages and estimates") +
# geom_hline(yintercept=0,size=1.2,colour="#535353") +
labs(subtitle = "Kanishka Misra")
batters_estimates %>%
filter(AB >= 20) %>%
gather(type, value, avg, estimate) %>%
mutate(type = plyr::revalue(type, c(avg = "Raw",
estimate = "With EB Shrinkage"))) %>%
ggplot(aes(AB, value)) +
geom_point(color = yellow) +
geom_hline(color = red, size = 1.5, yintercept = prior_mu) +
facet_wrap(~type) +
ylab("average") +
geom_smooth(method = "lm", color = blue, size = 1.5) +
scale_x_log10() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
ggtitle("At-bats vs log averages and estimates") +
# geom_hline(yintercept=0,size=1.2,colour="#535353")
# Low AB value players are getting grossly overestimated by the shrinkage model
# There is a need to make a model that considers AB
# By re-parameterizing the true probability(posterior) distribution, we can express it in terms of
# mean of the batting average and how spread out the distribution is
# p ~ Beta(mu/sigma, (1-mu)/sigma)
# To include AB, we can define mu as
# I give up
library(gamlss)
batters_estimates %>%
filter(AB >= 20) %>%
gather(type, value, avg, estimate) %>%
mutate(type = plyr::revalue(type, c(avg = "Raw",
estimate = "With EB Shrinkage"))) %>%
ggplot(aes(AB, value)) +
geom_point(color = yellow) +
geom_hline(color = red, size = 1.5, yintercept = prior_mu) +
facet_wrap(~type) +
ylab("average") +
geom_smooth(method = "lm", color = blue, size = 1.5) +
scale_x_log10() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
ggtitle("At-bats vs log averages and estimates")
ggplot(estimates_wAB, aes(original, new, color = AB)) +
geom_point() +
geom_abline(color = red, size = 1) +
xlab("Original EB Estimate") +
ylab("EB Estimate w/ AB term") +
scale_color_continuous(trans = "log", breaks = 10 ^ (0:4)) +
# theme_minimal()+
theme_fivethirtyeight(base_family = "Roboto Condensed") +
theme(plot.title=element_text(family="Roboto Condensed", face = "bold")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
# geom_hline(yintercept=0,size=1.2,colour="#535353") +
ggtitle("Shrinkage of Estimates with AB") +
labs(subtitle = "Kanishka Misra", caption = "A Plot by Kanishka Misra")
ggplot(estimates_wAB, aes(original, new, color = AB)) +
geom_point() +
geom_abline(color = red, size = 1.4) +
xlab("Original EB Estimate") +
ylab("EB Estimate w/ AB term") +
scale_color_continuous(trans = "log", breaks = 10 ^ (0:4)) +
# theme_minimal()+
theme_fivethirtyeight(base_family = "Roboto Condensed") +
theme(plot.title=element_text(family="Roboto Condensed", face = "bold")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
# geom_hline(yintercept=0,size=1.2,colour="#535353") +
ggtitle("Shrinkage of Estimates with AB") +
labs(subtitle = "Kanishka Misra", caption = "A Plot by Kanishka Misra")
relevel(bats)
relevel(batters$estimatebats, "R")
relevel(batters_estimate$bats, "R")
View(batters_estimates)
batters <- Master %>%
tbl_df() %>%
dplyr::select(playerID, nameFirst, nameLast, bats) %>%
unite(name, nameFirst, nameLast, sep = " ") %>%
inner_join(batters, by = "playerID")
library(gamlss)
fit <- gamlss(cbind(Hits, AB - Hits) ~ log(AB),
data = dplyr::select(batters, -bats),
family = BB(mu.link = "identity"))
batters_estimates <- batters%>%
mutate(mu = fitted(fit, "mu"),
sigma = fitted(fit, "sigma"),
alpha0 = mu / sigma,
beta0 = (1 - mu) / sigma,
alpha1 = alpha0 + Hits,
beta1 = beta0 + AB - Hits,
estimate = alpha1 / (alpha1 + beta1))
relevel(batters_estimate$bats, "R")
relevel(batters_estimates$bats, "R")
batters_estimates2 <- batters_estimates %>%
filter(!is.na(bats)) %>%
mutate(bats = relevel(bats, "R"))
fit2 <- gamlss(cbind(Hits, AB - Hits) ~ log(AB) + bats,
data = career2,
family = BB(mu.link = "identity"))
fit2 <- gamlss(cbind(Hits, AB - Hits) ~ log(AB) + bats,
data = batters_estimates2,
family = BB(mu.link = "identity"))
tidy(fit2)
batters2 <- batters %>%
filter(!is.na(bats)) %>%
mutate(bats = relevel(bats, "R"))
rm(batters_estimates2)
fit2 <- gamlss(cbind(Hits, AB - Hits) ~ log(AB) + bats,
data = batters2,
family = BB(mu.link = "identity"))
tidy(fit2)
sigma <- fitted(fit2, "sigma")[1]
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line() +
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line() +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("Estimates based on at-bats")+
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line(size = 1) +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("Estimates based on at-bats")+
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line(size = 1.5) +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("Estimates based on at-bats")+
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line(size = 1.4) +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("Estimates based on at-bats")+
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
crossing(x = seq(0.08, .35, .001), AB = c(1, 10, 100, 1000, 10000)) %>%
mutate(density = dbeta(x, (mu_0 + mu_AB * log(AB)) / sigma,
(1 - (mu_0 + mu_AB * log(AB))) / sigma)) %>%
mutate(AB = factor(AB)) %>%
ggplot(aes(x, density, color = AB, group = AB)) +
geom_line(size = 1.5) +
xlab("Batting average") +
ylab("Prior density") +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("Estimates based on at-bats")
crossing(bats = c("L", "R"),
AB = c(1, 10, 100, 1000, 10000)) %>%
augment(fit2, newdata = .) %>%
rename(mu = .fitted) %>%
crossing(x = seq(.1, .36, .0005)) %>%
mutate(alpha = mu / sigma,
beta = (1 - mu) / sigma,
density = dbeta(x, alpha, beta)) %>%
ggplot(aes(x, density, color = factor(AB), lty = bats)) +
geom_line(size = 1.4) +
theme_fivethirtyeight() +
theme(plot.title=element_text(family="Roboto")) +
theme(axis.title = element_text(family = "Roboto", face = "bold", color="#666666", size = 12)) +
theme(axis.text = element_text(family = "Roboto", face = "bold", color = "#535353", size = 11)) +
theme(strip.text.x = element_text(family = "Roboto", face = "bold", size = 11)) +
geom_hline(yintercept=0,size=1.2,colour="#535353") +
scale_color_manual(values = c(blue, red, yellow, green , purple)) +
ggtitle("New Estimates based on at-bats")+
labs(x = "Batting average",
y = "Prior density",
color = "AB",
lty = "Batting hand")
library(dplyr)
library(RSQLite)
save.image("C:/Users/Kanishka/footballR/workspace.RData")
library(dplyr)
library(RSQLite)
con <- dbConnect(SQLite(), dbname="database.sqlite")
dbListTables(con)
matches <- tbl_df(dbGetQuery(con,
"SELECT m.season,
m.date,
t1.team_long_name as 'home',
t1.team_short_name as 'home_short',
t2.team_long_name as 'away',
t2.team_short_name as 'away_short',
m.home_team_goal as 'home_goal',
m.away_team_goal as 'away_goal',
m.goal,
m.shoton,
m.shotoff,
m.foulcommit,
m.card,
m.cross,
m.corner,
m.possession
FROM Match m
inner join Team t1 on
m.home_team_api_id = t1.team_api_id
inner join Team t2 on
m.away_team_api_id = t2.team_api_id
WHERE league_id = 1729"
))
con <- dbConnect(SQLite(), dbname="database.sqlite")
dbListTables(con)
getwd()
setwd("C:\Users\Kanishka\footballR")
setwd("C:/Users/Kanishka/footballR")
con <- dbConnect(SQLite(), dbname="database.sqlite")
dbListTables(con)
matches <- tbl_df(dbGetQuery(con,
"SELECT m.season,
m.date,
t1.team_long_name as 'home',
t1.team_short_name as 'home_short',
t2.team_long_name as 'away',
t2.team_short_name as 'away_short',
m.home_team_goal as 'home_goal',
m.away_team_goal as 'away_goal',
m.goal,
m.shoton,
m.shotoff,
m.foulcommit,
m.card,
m.cross,
m.corner,
m.possession
FROM Match m
inner join Team t1 on
m.home_team_api_id = t1.team_api_id
inner join Team t2 on
m.away_team_api_id = t2.team_api_id
WHERE league_id = 1729"
))
matches <- matches %>%
mutate(result = ifelse(home_goal > away_goal, "home",
ifelse (away_goal > home_goal, "away",
ifelse(home_goal == away_goal, "draw", "NA"))))
return(as.character(dbGetQuery(con,paste("SELECT player_name FROM Player WHERE player_api_id = ", x))))
playername <- function(x) {
return(lapply(x, function(x) {
if(!is.na(x)) {
return(as.character(dbGetQuery(con,paste("SELECT player_name FROM Player WHERE player_api_id = ", x))))
}
else {
return(NA)
}
}))
}
return(as.character(dbGetQuery(con,paste("SELECT player_name FROM Player WHERE player_api_id = ", x))))
playername <- function(x) {
return(lapply(x, function(x) {
if(!is.na(x)) {
return(as.character(dbGetQuery(con,paste("SELECT player_name FROM Player WHERE player_api_id = ", x))))
}
else {
return(NA)
}
}))
}
goals <- data.frame()
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
goals <- goals %>%
mutate(scorer = playername(player1), assister = playername(player2)) %>%
select(comment, subtype, elapsed, scorer, assister)
goals <- goals %>%
mutate(scorer = playername(player1), assister = playername(player2)) %>%
dplyr::select(comment, subtype, elapsed, scorer, assister)
xmlToDataFrame(goal) %>%
select(comment, subtype, elapsed, player1, player2)
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
goals <- data.frame()
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
dplyr::select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
View(goals)
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
dplyr::select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
View(goals)
rm(goals)
rm(goal)
library(XML)
add <- tryCatch({
xmlToDataFrame(goal) %>%
dplyr::select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
dplyr::select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
goals <- data.frame()
for (goal in matches$goal) {
add <- tryCatch({
xmlToDataFrame(goal) %>%
dplyr::select(comment, subtype, elapsed, player1, player2)
}, error = function(e) {
data.frame(comment = NA, subtype = NA, elapsed = NA, player1 = NA, player2 = NA)
})
goals <- rbind(goals, add)
rm(add)
}
warnings()
View(goals)
goals <- goals %>%
mutate(scorer = playername(player1), assister = playername(player2)) %>%
dplyr::select(comment, subtype, elapsed, scorer, assister)
goals$subtype = as.character(goals$subtype)
goals$scorer = as.character(goals$scorer)
goals$assister = as.character(goals$assister)
class(goals$subtype)
goals <- data.frame(goals, stringsAsFactors = F)
goals$subtype[goals$comment == "p"] = "penalty"
goals$subtype[goals$comment == "o"] = "own-goal"
goals$subtype[goals$comment == "rp"] = "retake-penalty"
goals$subtype[goals$comment == "dg"] = "disallowed"
goals$subtype[goals$comment == "psm"] = "penalty-missed"
View(matches)
